var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.WithoutFloatingButton=exports.WithLongContent=exports.WithCustomContent=exports.Default=exports.CustomButtonColor=void 0;var _react=_interopRequireDefault(require("react"));var _reactNative=require("react-native");var _GlobalWrapper=require("../../../molecules/GlobalWrapper");var _jsxRuntime=require("react-native-css-interop/jsx-runtime");var _default=exports.default={title:'GlobalWrapper',component:_GlobalWrapper.GlobalWrapper,argTypes:{onFloatingButtonPress:{action:'Floating button pressed'}}};var Template=function Template(args){return(0,_jsxRuntime.jsx)(_GlobalWrapper.GlobalWrapper,Object.assign({},args));};var Default=exports.Default=Template.bind({});Default.args={children:(0,_jsxRuntime.jsx)(_reactNative.Text,{children:"Default Content"}),showFloatingButton:true,floatingButtonColor:'black'};var WithoutFloatingButton=exports.WithoutFloatingButton=Template.bind({});WithoutFloatingButton.args=Object.assign({},Default.args,{showFloatingButton:false});var CustomButtonColor=exports.CustomButtonColor=Template.bind({});CustomButtonColor.args=Object.assign({},Default.args,{floatingButtonColor:'black'});var WithCustomContent=exports.WithCustomContent=Template.bind({});WithCustomContent.args=Object.assign({},Default.args,{children:(0,_jsxRuntime.jsx)(_reactNative.View,{style:{flex:1,justifyContent:'center',alignItems:'center'},children:(0,_jsxRuntime.jsx)(_reactNative.Text,{children:"Custom Content"})})});var WithLongContent=exports.WithLongContent=Template.bind({});WithLongContent.args=Object.assign({},Default.args,{children:(0,_jsxRuntime.jsx)(_jsxRuntime.Fragment,{children:Array(20).fill(null).map(function(_,index){return(0,_jsxRuntime.jsxs)(_reactNative.Text,{style:{marginBottom:20},children:["Long content item ",index+1]},index);})})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9HbG9iYWxXcmFwcGVyIiwiX2pzeFJ1bnRpbWUiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0IiwidGl0bGUiLCJjb21wb25lbnQiLCJHbG9iYWxXcmFwcGVyIiwiYXJnVHlwZXMiLCJvbkZsb2F0aW5nQnV0dG9uUHJlc3MiLCJhY3Rpb24iLCJUZW1wbGF0ZSIsImFyZ3MiLCJqc3giLCJPYmplY3QiLCJhc3NpZ24iLCJEZWZhdWx0IiwiYmluZCIsImNoaWxkcmVuIiwiVGV4dCIsInNob3dGbG9hdGluZ0J1dHRvbiIsImZsb2F0aW5nQnV0dG9uQ29sb3IiLCJXaXRob3V0RmxvYXRpbmdCdXR0b24iLCJDdXN0b21CdXR0b25Db2xvciIsIldpdGhDdXN0b21Db250ZW50IiwiVmlldyIsInN0eWxlIiwiZmxleCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsIldpdGhMb25nQ29udGVudCIsIkZyYWdtZW50IiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImluZGV4IiwianN4cyIsIm1hcmdpbkJvdHRvbSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy5zdG9yeWJvb2svc3Rvcmllcy9HbG9iYWxXcmFwcGVyL0dsb2JhbFdyYXBwZXIuc3Rvcmllcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50TWV0YSwgQ29tcG9uZW50U3RvcnkgfSBmcm9tICdAc3Rvcnlib29rL3JlYWN0J1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVGV4dCwgVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7IEdsb2JhbFdyYXBwZXIgfSBmcm9tICcuLi8uLi8uLi9tb2xlY3VsZXMvR2xvYmFsV3JhcHBlcidcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0aXRsZTogJ0dsb2JhbFdyYXBwZXInLFxuICBjb21wb25lbnQ6IEdsb2JhbFdyYXBwZXIsXG4gIGFyZ1R5cGVzOiB7XG4gICAgb25GbG9hdGluZ0J1dHRvblByZXNzOiB7IGFjdGlvbjogJ0Zsb2F0aW5nIGJ1dHRvbiBwcmVzc2VkJyB9LFxuICB9LFxufSBhcyBDb21wb25lbnRNZXRhPHR5cGVvZiBHbG9iYWxXcmFwcGVyPlxuXG5jb25zdCBUZW1wbGF0ZTogQ29tcG9uZW50U3Rvcnk8dHlwZW9mIEdsb2JhbFdyYXBwZXI+ID0gYXJncyA9PiA8R2xvYmFsV3JhcHBlciB7Li4uYXJnc30gLz5cblxuZXhwb3J0IGNvbnN0IERlZmF1bHQgPSBUZW1wbGF0ZS5iaW5kKHt9KVxuRGVmYXVsdC5hcmdzID0ge1xuICBjaGlsZHJlbjogPFRleHQ+RGVmYXVsdCBDb250ZW50PC9UZXh0PixcbiAgc2hvd0Zsb2F0aW5nQnV0dG9uOiB0cnVlLFxuICBmbG9hdGluZ0J1dHRvbkNvbG9yOiAnYmxhY2snLFxufVxuXG5leHBvcnQgY29uc3QgV2l0aG91dEZsb2F0aW5nQnV0dG9uID0gVGVtcGxhdGUuYmluZCh7fSlcbldpdGhvdXRGbG9hdGluZ0J1dHRvbi5hcmdzID0ge1xuICAuLi5EZWZhdWx0LmFyZ3MsXG4gIHNob3dGbG9hdGluZ0J1dHRvbjogZmFsc2UsXG59XG5cbmV4cG9ydCBjb25zdCBDdXN0b21CdXR0b25Db2xvciA9IFRlbXBsYXRlLmJpbmQoe30pXG5DdXN0b21CdXR0b25Db2xvci5hcmdzID0ge1xuICAuLi5EZWZhdWx0LmFyZ3MsXG4gIGZsb2F0aW5nQnV0dG9uQ29sb3I6ICdibGFjaycsXG59XG5cbmV4cG9ydCBjb25zdCBXaXRoQ3VzdG9tQ29udGVudCA9IFRlbXBsYXRlLmJpbmQoe30pXG5XaXRoQ3VzdG9tQ29udGVudC5hcmdzID0ge1xuICAuLi5EZWZhdWx0LmFyZ3MsXG4gIGNoaWxkcmVuOiAoXG4gICAgPFZpZXcgc3R5bGU9e3sgZmxleDogMSwganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fT5cbiAgICAgIDxUZXh0PkN1c3RvbSBDb250ZW50PC9UZXh0PlxuICAgIDwvVmlldz5cbiAgKSxcbn1cblxuZXhwb3J0IGNvbnN0IFdpdGhMb25nQ29udGVudCA9IFRlbXBsYXRlLmJpbmQoe30pXG5XaXRoTG9uZ0NvbnRlbnQuYXJncyA9IHtcbiAgLi4uRGVmYXVsdC5hcmdzLFxuICBjaGlsZHJlbjogKFxuICAgIDw+XG4gICAgICB7QXJyYXkoMjApXG4gICAgICAgIC5maWxsKG51bGwpXG4gICAgICAgIC5tYXAoKF8sIGluZGV4KSA9PiAoXG4gICAgICAgICAgPFRleHQga2V5PXtpbmRleH0gc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAyMCB9fT5cbiAgICAgICAgICAgIExvbmcgY29udGVudCBpdGVtIHtpbmRleCArIDF9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApKX1cbiAgICA8Lz5cbiAgKSxcbn1cbiJdLCJtYXBwaW5ncyI6IjZSQUNBLElBQUFBLE1BQUEsQ0FBQUMsc0JBQUEsQ0FBQUMsT0FBQSxXQUNBLElBQUFDLFlBQUEsQ0FBQUQsT0FBQSxpQkFDQSxJQUFBRSxjQUFBLENBQUFGLE9BQUEscUNBQWdFLElBQUFHLFdBQUEsQ0FBQUgsT0FBQSw2Q0FBQUksUUFBQSxDQUFBQyxPQUFBLENBQUFDLE9BQUEsQ0FFakQsQ0FDYkMsS0FBSyxDQUFFLGVBQWUsQ0FDdEJDLFNBQVMsQ0FBRUMsNEJBQWEsQ0FDeEJDLFFBQVEsQ0FBRSxDQUNSQyxxQkFBcUIsQ0FBRSxDQUFFQyxNQUFNLENBQUUseUJBQTBCLENBQzdELENBQ0YsQ0FBQyxDQUVELEdBQU0sQ0FBQUMsUUFBOEMsQ0FBRyxRQUFqRCxDQUFBQSxRQUE4Q0EsQ0FBR0MsSUFBSSxRQUFJLEdBQUFYLFdBQUEsQ0FBQVksR0FBQSxFQUFDYixjQUFBLENBQUFPLGFBQWEsQ0FBQU8sTUFBQSxDQUFBQyxNQUFBLElBQUtILElBQUksQ0FBRyxDQUFDLEdBRW5GLEdBQU0sQ0FBQUksT0FBTyxDQUFBYixPQUFBLENBQUFhLE9BQUEsQ0FBR0wsUUFBUSxD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