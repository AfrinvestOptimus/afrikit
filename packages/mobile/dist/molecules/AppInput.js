var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _nativewind=require("nativewind");var React=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _reactNativeReanimated=require("react-native-reanimated");var _reactNativeRemixIcon=_interopRequireDefault(require("react-native-remix-icon"));var _colors=_interopRequireDefault(require("afrikit-shared/dist/colors"));var _validation=require("../utilities/validation");var _AppHintText=_interopRequireDefault(require("./AppHintText"));var _jsxRuntime=require("react-native-css-interop/jsx-runtime");var _excluded=["onBlur","FloatingLabel","onFocus","error","multiline","type","label","numberOfLines","onChangeText","value","containerStyle"];function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}var AppInput=function AppInput(_ref){var onBlur=_ref.onBlur,_ref$FloatingLabel=_ref.FloatingLabel,FloatingLabel=_ref$FloatingLabel===void 0?true:_ref$FloatingLabel,onFocus=_ref.onFocus,error=_ref.error,multiline=_ref.multiline,type=_ref.type,label=_ref.label,numberOfLines=_ref.numberOfLines,onChangeTextProp=_ref.onChangeText,_ref$value=_ref.value,value=_ref$value===void 0?'':_ref$value,containerStyle=_ref.containerStyle,props=(0,_objectWithoutProperties2.default)(_ref,_excluded);var textInputRef=React.useRef(null);var _React$useState=React.useState(''),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),localValue=_React$useState2[0],setLocalValue=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=(0,_slicedToArray2.default)(_React$useState3,2),focused=_React$useState4[0],setFocused=_React$useState4[1];var _React$useState5=React.useState(value),_React$useState6=(0,_slicedToArray2.default)(_React$useState5,2),inputValue=_React$useState6[0],setInputValue=_React$useState6[1];var animatedIsFocused=React.useRef(new _reactNative.Animated.Value(value?1:0)).current;var _useColorScheme=(0,_nativewind.useColorScheme)(),colorScheme=_useColorScheme.colorScheme;var isDarkMode=colorScheme==='dark';React.useEffect(function(){_reactNative.Animated.timing(animatedIsFocused,{toValue:focused||inputValue?1:0,duration:200,useNativeDriver:false}).start();},[focused,animatedIsFocused,inputValue]);var _text=(0,_reactNativeReanimated.useSharedValue)(value);var onChangeText=React.useCallback(function(text){setInputValue(text);onChangeTextProp==null?void 0:onChangeTextProp(text);_text.value=text;},[_text]);var handleBlur=function handleBlur(e){if(type){(0,_validation.AppInputBlur)(localValue,onChangeText,false);}onBlur==null?void 0:onBlur(e);setFocused(false);};var handleFocus=function handleFocus(e){onFocus==null?void 0:onFocus(e);setFocused(true);};var addedProps=Object.assign({},props,{onChangeText:onChangeText,onBlur:handleBlur,onFocus:handleFocus,placeholder:FloatingLabel?undefined:props.placeholder});var floatLabelStyle={top:animatedIsFocused.interpolate({inputRange:[0,1],outputRange:[10,0]}),fontSize:animatedIsFocused.interpolate({inputRange:[0,1],outputRange:[12,11]}),lineHeight:animatedIsFocused.interpolate({inputRange:[0,1],outputRange:[12,20]})};var handleClear=function handleClear(){setInputValue('');};var getBorderStyle=function getBorderStyle(){if(focused){return error?'border-b-2 border-light-red9 dark:border-dark-red9 rounded-t-md':'border-b-2 border-light-blue10 dark:border-dark-blue10 rounded-t-md';}return error?'border-2 border-light-red9 dark:border-dark-red9 rounded-md':'border-0 border-transparent rounded-md';};return(0,_jsxRuntime.jsxs)(_reactNative.View,{children:[(0,_jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback,{onPress:function onPress(){var _textInputRef$current;(_textInputRef$current=textInputRef.current)==null?void 0:_textInputRef$current.focus();},children:(0,_jsxRuntime.jsxs)(_reactNative.View,{className:`px-sm items-center w-full flex-row bg-light-surface-gray dark:bg-dark-surface-gray h-[56px] ${getBorderStyle()} ${containerStyle}`,children:[(0,_jsxRuntime.jsxs)(_reactNative.View,{className:"flex-1 px-xs ",children:[FloatingLabel&&(0,_jsxRuntime.jsx)(_reactNative.Animated.Text,{style:[floatLabelStyle],className:"gap-xs  dark:text-dark-type-gray-muted text-light-type-gray-muted text-sm-title",allowFontScaling:false,children:label}),(0,_jsxRuntime.jsx)(_reactNative.TextInput,Object.assign({},addedProps,{ref:textInputRef,allowFontScaling:false,hitSlop:{top:10,bottom:10,left:40,right:40},returnKeyType:"done",autoFocus:focused,numberOfLines:numberOfLines,value:inputValue,selectionColor:"text-light-type-gray",className:"text-light-type-gray dark:text-dark-type-gray"}))]}),inputValue.length>0&&(0,_jsxRuntime.jsx)(_reactNative.TouchableOpacity,{onPress:handleClear,className:"justify-center pl-2",children:(0,_jsxRuntime.jsx)(_reactNativeRemixIcon.default,{name:"close-circle-fill",size:24,color:_colors.default[isDarkMode?'dark':'light'].type.gray.DEFAULT})})]})}),!!error&&(typeof error==='string'?(0,_jsxRuntime.jsx)(_AppHintText.default,{type:"error",text:error,className:"py-xs"}):undefined)]});};var _default=exports.default=AppInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbmF0aXZld2luZCIsInJlcXVpcmUiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlUmVhbmltYXRlZCIsIl9yZWFjdE5hdGl2ZVJlbWl4SWNvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29sb3JzIiwiX3ZhbGlkYXRpb24iLCJfQXBwSGludFRleHQiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkFwcElucHV0IiwiX3JlZiIsIm9uQmx1ciIsIl9yZWYkRmxvYXRpbmdMYWJlbCIsIkZsb2F0aW5nTGFiZWwiLCJvbkZvY3VzIiwiZXJyb3IiLCJtdWx0aWxpbmUiLCJ0eXBlIiwibGFiZWwiLCJudW1iZXJPZkxpbmVzIiwib25DaGFuZ2VUZXh0UHJvcCIsIm9uQ2hhbmdlVGV4dCIsIl9yZWYkdmFsdWUiLCJ2YWx1ZSIsImNvbnRhaW5lclN0eWxlIiwicHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwidGV4dElucHV0UmVmIiwidXNlUmVmIiwiX1JlYWN0JHVzZVN0YXRlIiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwibG9jYWxWYWx1ZSIsInNldExvY2FsVmFsdWUiLCJfUmVhY3QkdXNlU3RhdGUzIiwiX1JlYWN0JHVzZVN0YXRlNCIsImZvY3VzZWQiLCJzZXRGb2N1c2VkIiwiX1JlYWN0JHVzZVN0YXRlNSIsIl9SZWFjdCR1c2VTdGF0ZTYiLCJpbnB1dFZhbHVlIiwic2V0SW5wdXRWYWx1ZSIsImFuaW1hdGVkSXNGb2N1c2VkIiwiQW5pbWF0ZWQiLCJWYWx1ZSIsImN1cnJlbnQiLCJfdXNlQ29sb3JTY2hlbWUiLCJ1c2VDb2xvclNjaGVtZSIsImNvbG9yU2NoZW1lIiwiaXNEYXJrTW9kZSIsInVzZUVmZmVjdCIsInRpbWluZyIsInRvVmFsdWUiLCJkdXJhdGlvbiIsInVzZU5hdGl2ZURyaXZlciIsInN0YXJ0IiwiX3RleHQiLCJ1c2VTaGFyZWRWYWx1ZSIsInVzZUNhbGxiYWNrIiwidGV4dCIsImhhbmRsZUJsdXIiLCJBcHBJbnB1dEJsdXIiLCJoYW5kbGVGb2N1cyIsImFkZGVkUHJvcHMiLCJhc3NpZ24iLCJwbGFjZWhvbGRlciIsInVuZGVmaW5lZCIsImZsb2F0TGFiZWxTdHlsZSIsInRvcCIsImludGVycG9sYXRlIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwiaGFuZGxlQ2xlYXIiLCJnZXRCb3JkZXJTdHlsZSIsImpzeHMiLCJWaWV3IiwiY2hpbGRyZW4iLCJqc3giLCJUb3VjaGFibGVXaXRob3V0RmVlZGJhY2siLCJvblByZXNzIiwiX3RleHRJbnB1dFJlZiRjdXJyZW50IiwiZm9jdXMiLCJjbGFzc05hbWUiLCJUZXh0Iiwic3R5bGUiLCJhbGxvd0ZvbnRTY2FsaW5nIiwiVGV4dElucHV0IiwicmVmIiwiaGl0U2xvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInJldHVybktleVR5cGUiLCJhdXRvRm9jdXMiLCJzZWxlY3Rpb25Db2xvciIsImxlbmd0aCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJuYW1lIiwic2l6ZSIsImNvbG9yIiwiY29sb3JzIiwiZ3JheSIsIkRFRkFVTFQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9tb2xlY3VsZXMvQXBwSW5wdXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB7IHVzZUNvbG9yU2NoZW1lIH0gZnJvbSAnbmF0aXZld2luZCdcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtcbiAgQW5pbWF0ZWQsXG4gIE5hdGl2ZVN5bnRoZXRpY0V2ZW50LFxuICBUZXh0SW5wdXQsXG4gIFRleHRJbnB1dEZvY3VzRXZlbnREYXRhLFxuICBUb3VjaGFibGVPcGFjaXR5LFxuICBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2ssXG4gIFZpZXcsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7IHVzZVNoYXJlZFZhbHVlIH0gZnJvbSAncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnXG5pbXBvcnQgUmVtaXhJY29uIGZyb20gJ3JlYWN0LW5hdGl2ZS1yZW1peC1pY29uJ1xuaW1wb3J0IGNvbG9ycyBmcm9tICdhZnJpa2l0LXNoYXJlZC9kaXN0L2NvbG9ycydcbmltcG9ydCB7IEFwcElucHV0UHJvcHMgfSBmcm9tICcuLi90eXBlcy9hdG9tcydcbmltcG9ydCB7IEFwcElucHV0Qmx1ciB9IGZyb20gJy4uL3V0aWxpdGllcy92YWxpZGF0aW9uJ1xuaW1wb3J0IEFwcEhpbnRUZXh0IGZyb20gJy4vQXBwSGludFRleHQnXG5cbmNvbnN0IEFwcElucHV0OiBSZWFjdC5GQzxBcHBJbnB1dFByb3BzPiA9ICh7XG4gIG9uQmx1cixcbiAgRmxvYXRpbmdMYWJlbCA9IHRydWUsXG4gIG9uRm9jdXMsXG4gIGVycm9yLFxuICBtdWx0aWxpbmUsXG4gIHR5cGUsXG4gIGxhYmVsLFxuICBudW1iZXJPZkxpbmVzLFxuICBvbkNoYW5nZVRleHQ6IG9uQ2hhbmdlVGV4dFByb3AsXG4gIHZhbHVlID0gJycsXG4gIGNvbnRhaW5lclN0eWxlLFxuICAuLi5wcm9wc1xufSkgPT4ge1xuICBjb25zdCB0ZXh0SW5wdXRSZWYgPSBSZWFjdC51c2VSZWY8VGV4dElucHV0PihudWxsKVxuICBjb25zdCBbbG9jYWxWYWx1ZSwgc2V0TG9jYWxWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KCcnKVxuICBjb25zdCBbZm9jdXNlZCwgc2V0Rm9jdXNlZF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSlcbiAgY29uc3QgW2lucHV0VmFsdWUsIHNldElucHV0VmFsdWVdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPih2YWx1ZSlcbiAgY29uc3QgYW5pbWF0ZWRJc0ZvY3VzZWQgPSBSZWFjdC51c2VSZWYobmV3IEFuaW1hdGVkLlZhbHVlKHZhbHVlID8gMSA6IDApKS5jdXJyZW50XG4gIGNvbnN0IHsgY29sb3JTY2hlbWUgfSA9IHVzZUNvbG9yU2NoZW1lKClcbiAgY29uc3QgaXNEYXJrTW9kZSA9IGNvbG9yU2NoZW1lID09PSAnZGFyaydcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIEFuaW1hdGVkLnRpbWluZyhhbmltYXRlZElzRm9jdXNlZCwge1xuICAgICAgdG9WYWx1ZTogZm9jdXNlZCB8fCBpbnB1dFZhbHVlID8gMSA6IDAsXG4gICAgICBkdXJhdGlvbjogMjAwLFxuICAgICAgdXNlTmF0aXZlRHJpdmVyOiBmYWxzZSxcbiAgICB9KS5zdGFydCgpXG4gIH0sIFtmb2N1c2VkLCBhbmltYXRlZElzRm9jdXNlZCwgaW5wdXRWYWx1ZV0pXG5cbiAgLy8gc3RvcmUgaW5pdCB2YWx1ZVxuICBjb25zdCBfdGV4dCA9IHVzZVNoYXJlZFZhbHVlKHZhbHVlKVxuXG4gIC8vIGhhbmRsZSBpbnB1dCBmaWVsZCBjaGFuZ2Ugc3RhdGUgYXQgZXZlcnkgc3Rlb1xuICBjb25zdCBvbkNoYW5nZVRleHQgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICBzZXRJbnB1dFZhbHVlKHRleHQpXG4gICAgICBvbkNoYW5nZVRleHRQcm9wPy4odGV4dClcbiAgICAgIF90ZXh0LnZhbHVlID0gdGV4dFxuICAgIH0sXG4gICAgW190ZXh0XSxcbiAgKVxuXG4gIC8vIGhhbmRsZSBpbnB1dCBub3QgZm9jdXNlZCBzdGF0ZVxuICBjb25zdCBoYW5kbGVCbHVyID0gKGU6IE5hdGl2ZVN5bnRoZXRpY0V2ZW50PFRleHRJbnB1dEZvY3VzRXZlbnREYXRhPikgPT4ge1xuICAgIGlmICh0eXBlKSB7XG4gICAgICBBcHBJbnB1dEJsdXIobG9jYWxWYWx1ZSwgb25DaGFuZ2VUZXh0LCBmYWxzZSlcbiAgICB9XG4gICAgb25CbHVyPy4oZSlcbiAgICBzZXRGb2N1c2VkKGZhbHNlKVxuICB9XG5cbiAgLy8gaGFuZGxlIGZvY3VzIHN0YXRlIGZvciBpbnB1dCBmaWVsZFxuICBjb25zdCBoYW5kbGVGb2N1cyA9IChlOiBOYXRpdmVTeW50aGV0aWNFdmVudDxUZXh0SW5wdXRGb2N1c0V2ZW50RGF0YT4pID0+IHtcbiAgICBvbkZvY3VzPy4oZSlcbiAgICBzZXRGb2N1c2VkKHRydWUpXG4gIH1cblxuICAvLyBjb2xsYXRlIGFsbCBwcm9wc1xuICBjb25zdCBhZGRlZFByb3BzID0ge1xuICAgIC4uLnByb3BzLFxuICAgIG9uQ2hhbmdlVGV4dDogb25DaGFuZ2VUZXh0LFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBwbGFjZWhvbGRlcjogRmxvYXRpbmdMYWJlbCA/IHVuZGVmaW5lZCA6IHByb3BzLnBsYWNlaG9sZGVyLFxuICB9XG5cbiAgY29uc3QgZmxvYXRMYWJlbFN0eWxlID0ge1xuICAgIHRvcDogYW5pbWF0ZWRJc0ZvY3VzZWQuaW50ZXJwb2xhdGUoe1xuICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgICAgb3V0cHV0UmFuZ2U6IFsxMCwgMF0sXG4gICAgfSksXG4gICAgZm9udFNpemU6IGFuaW1hdGVkSXNGb2N1c2VkLmludGVycG9sYXRlKHtcbiAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgIG91dHB1dFJhbmdlOiBbMTIsIDExXSxcbiAgICB9KSxcbiAgICBsaW5lSGVpZ2h0OiBhbmltYXRlZElzRm9jdXNlZC5pbnRlcnBvbGF0ZSh7XG4gICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICBvdXRwdXRSYW5nZTogWzEyLCAyMF0sXG4gICAgfSksXG4gIH1cbiAgLy8gaGFuZGVsIGNsZWFyIGlucHV0IGZpZWxkXG4gIGNvbnN0IGhhbmRsZUNsZWFyID0gKCkgPT4ge1xuICAgIHNldElucHV0VmFsdWUoJycpXG4gIH1cblxuICBjb25zdCBnZXRCb3JkZXJTdHlsZSA9ICgpID0+IHtcbiAgICBpZiAoZm9jdXNlZCkge1xuICAgICAgcmV0dXJuIGVycm9yXG4gICAgICAgID8gJ2JvcmRlci1iLTIgYm9yZGVyLWxpZ2h0LXJlZDkgZGFyazpib3JkZXItZGFyay1yZWQ5IHJvdW5kZWQtdC1tZCcgLy8gc2hvdyByZWQgYm90dG9tIGJvcmRlciB3aGVuIHRoZSBpbnB1dCBpc24ndCB2YWx1ZWRcbiAgICAgICAgOiAnYm9yZGVyLWItMiBib3JkZXItbGlnaHQtYmx1ZTEwIGRhcms6Ym9yZGVyLWRhcmstYmx1ZTEwIHJvdW5kZWQtdC1tZCcgLy8gc2hvdyBibHVlIGJvdHRvbSBib3JkZXIgd2hlbiB0aGUgaW5wdXQgaXMgdmFsaWRcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yXG4gICAgICA/ICdib3JkZXItMiBib3JkZXItbGlnaHQtcmVkOSBkYXJrOmJvcmRlci1kYXJrLXJlZDkgcm91bmRlZC1tZCcgLy8gc2hvdyByZWQgYm9yZGVyIHdoZW4gdGhlIGlucHV0IGlzbid0IHZhbHVlZCBhbmQgdGhlIGZpZWxkIGlzbid0IGluIGEgZm9jdXNlZCBzdGF0ZVxuICAgICAgOiAnYm9yZGVyLTAgYm9yZGVyLXRyYW5zcGFyZW50IHJvdW5kZWQtbWQnIC8vIGRlZmF1bHRpbmcgdG8gcm91bmRlZCBpbnB1dCB3aGVuIHRoZXJlJ3MgbmVpdGhlciBhIGZvY3VzZWQgc3RhdGUgb3IgZXJyb3Igc3RhdGUgb24gdGhlIGlucHV0IGZpZWxkXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxWaWV3PlxuICAgICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFja1xuICAgICAgICBvblByZXNzPXsoKSA9PiB7XG4gICAgICAgICAgdGV4dElucHV0UmVmLmN1cnJlbnQ/LmZvY3VzKClcbiAgICAgICAgICAvL1RPRE86IHRvIGJlIG1vdGlmaWVkXG4gICAgICAgICAgLy8gcHJvcHM/Lm9uUHJlc3M/LigpO1xuICAgICAgICB9fT5cbiAgICAgICAgPFZpZXdcbiAgICAgICAgICBjbGFzc05hbWU9e2BweC1zbSBpdGVtcy1jZW50ZXIgdy1mdWxsIGZsZXgtcm93IGJnLWxpZ2h0LXN1cmZhY2UtZ3JheSBkYXJrOmJnLWRhcmstc3VyZmFjZS1ncmF5IGgtWzU2cHhdICR7Z2V0Qm9yZGVyU3R5bGUoKX0gJHtjb250YWluZXJTdHlsZX1gfT5cbiAgICAgICAgICA8VmlldyBjbGFzc05hbWU9XCJmbGV4LTEgcHgteHMgXCI+XG4gICAgICAgICAgICB7RmxvYXRpbmdMYWJlbCAmJiAoXG4gICAgICAgICAgICAgIDxBbmltYXRlZC5UZXh0XG4gICAgICAgICAgICAgICAgc3R5bGU9e1tmbG9hdExhYmVsU3R5bGVdfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdhcC14cyAgZGFyazp0ZXh0LWRhcmstdHlwZS1ncmF5LW11dGVkIHRleHQtbGlnaHQtdHlwZS1ncmF5LW11dGVkIHRleHQtc20tdGl0bGVcIlxuICAgICAgICAgICAgICAgIGFsbG93Rm9udFNjYWxpbmc9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgIDwvQW5pbWF0ZWQuVGV4dD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgICAgIHsuLi5hZGRlZFByb3BzfVxuICAgICAgICAgICAgICByZWY9e3RleHRJbnB1dFJlZn1cbiAgICAgICAgICAgICAgYWxsb3dGb250U2NhbGluZz17ZmFsc2V9XG4gICAgICAgICAgICAgIGhpdFNsb3A9e3sgdG9wOiAxMCwgYm90dG9tOiAxMCwgbGVmdDogNDAsIHJpZ2h0OiA0MCB9fVxuICAgICAgICAgICAgICByZXR1cm5LZXlUeXBlPVwiZG9uZVwiXG4gICAgICAgICAgICAgIGF1dG9Gb2N1cz17Zm9jdXNlZH1cbiAgICAgICAgICAgICAgbnVtYmVyT2ZMaW5lcz17bnVtYmVyT2ZMaW5lc31cbiAgICAgICAgICAgICAgdmFsdWU9e2lucHV0VmFsdWV9XG4gICAgICAgICAgICAgIHNlbGVjdGlvbkNvbG9yPVwidGV4dC1saWdodC10eXBlLWdyYXlcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWxpZ2h0LXR5cGUtZ3JheSBkYXJrOnRleHQtZGFyay10eXBlLWdyYXlcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAge2lucHV0VmFsdWUubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eSBvblByZXNzPXtoYW5kbGVDbGVhcn0gY2xhc3NOYW1lPVwianVzdGlmeS1jZW50ZXIgcGwtMlwiPlxuICAgICAgICAgICAgICA8UmVtaXhJY29uXG4gICAgICAgICAgICAgICAgbmFtZT1cImNsb3NlLWNpcmNsZS1maWxsXCJcbiAgICAgICAgICAgICAgICBzaXplPXsyNH1cbiAgICAgICAgICAgICAgICBjb2xvcj17Y29sb3JzW2lzRGFya01vZGUgPyAnZGFyaycgOiAnbGlnaHQnXS50eXBlLmdyYXkuREVGQVVMVH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICApfVxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgICAgIHshIWVycm9yICYmXG4gICAgICAgICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnID8gKFxuICAgICAgICAgIDxBcHBIaW50VGV4dCB0eXBlPVwiZXJyb3JcIiB0ZXh0PXtlcnJvcn0gY2xhc3NOYW1lPVwicHkteHNcIiAvPlxuICAgICAgICApIDogdW5kZWZpbmVkKX1cbiAgICA8L1ZpZXc+XG4gIClcbn1cbmV4cG9ydCBkZWZhdWx0IEFwcElucHV0XG4iXSwibWFwcGluZ3MiOiIrV0FFQSxJQUFBQSxXQUFBLENBQUFDLE9BQUEsZUFDQSxJQUFBQyxLQUFBLENBQUFDLHVCQUFBLENBQUFGLE9BQUEsV0FDQSxJQUFBRyxZQUFBLENBQUFILE9BQUEsaUJBU0EsSUFBQUksc0JBQUEsQ0FBQUosT0FBQSw0QkFDQSxJQUFBSyxxQkFBQSxDQUFBQyxzQkFBQSxDQUFBTixPQUFBLDZCQUNBLElBQUFPLE9BQUEsQ0FBQUQsc0JBQUEsQ0FBQU4sT0FBQSxnQ0FFQSxJQUFBUSxXQUFBLENBQUFSLE9BQUEsNEJBQ0EsSUFBQVMsWUFBQSxDQUFBSCxzQkFBQSxDQUFBTixPQUFBLG1CQUF1QyxJQUFBVSxXQUFBLENBQUFWLE9BQUEsNkNBQUFXLFNBQUEsMElBQUFDLHlCQUFBQyxDQUFBLHdCQUFBQyxPQUFBLGlCQUFBQyxDQUFBLEtBQUFELE9BQUEsR0FBQUUsQ0FBQSxLQUFBRixPQUFBLFVBQUFGLHdCQUFBLFVBQUFBLHlCQUFBQyxDQUFBLFNBQUFBLENBQUEsQ0FBQUcsQ0FBQSxDQUFBRCxDQUFBLElBQUFGLENBQUEsWUFBQVgsd0JBQUFXLENBQUEsQ0FBQUUsQ0FBQSxNQUFBQSxDQUFBLEVBQUFGLENBQUEsRUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFFBQUFKLENBQUEsV0FBQUEsQ0FBQSxtQkFBQUEsQ0FBQSxxQkFBQUEsQ0FBQSxRQUFBSyxPQUFBLENBQUFMLENBQUEsTUFBQUcsQ0FBQSxDQUFBSix3QkFBQSxDQUFBRyxDQUFBLEtBQUFDLENBQUEsRUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsU0FBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsTUFBQVEsQ0FBQSxFQUFBQyxTQUFBLE9BQUFDLENBQUEsQ0FBQUMsTUFBQSxDQUFBQyxjQUFBLEVBQUFELE1BQUEsQ0FBQUUsd0JBQUEsU0FBQUMsQ0FBQSxJQUFBZCxDQUFBLGdCQUFBYyxD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