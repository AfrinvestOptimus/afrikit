var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _nativewind=require("nativewind");var _react=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var _jsxRuntime=require("react-native-css-interop/jsx-runtime");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}var CodeInput=function CodeInput(_ref){var _ref$count=_ref.count,count=_ref$count===void 0?4:_ref$count,secureEntry=_ref.secureEntry,isError=_ref.isError,onFullCode=_ref.onFullCode,keypad=_ref.keypad;var _useState=(0,_react.useState)(undefined),_useState2=(0,_slicedToArray2.default)(_useState,2),codes=_useState2[0],setCodes=_useState2[1];var _useColorScheme=(0,_nativewind.useColorScheme)(),colorScheme=_useColorScheme.colorScheme;(0,_react.useMemo)(function(){setCodes(Array(count).fill(''));},[count]);(0,_react.useEffect)(function(){if(keypad==='Native'){var _refs$,_refs$$current;(_refs$=refs[0])==null?void 0:(_refs$$current=_refs$.current)==null?void 0:_refs$$current.focus();}},[keypad]);var refs=[(0,_react.useRef)(null),(0,_react.useRef)(null),(0,_react.useRef)(null),(0,_react.useRef)(null),(0,_react.useRef)(null),(0,_react.useRef)(null)];var onChangeCode=function onChangeCode(text,index){var _String;if(text.length>1){var _current;var _newCodes=text.split('');setCodes(_newCodes);(_current=refs[count-1].current)==null?void 0:_current.focus();return;}var newCodes=(0,_toConsumableArray2.default)(codes);newCodes[index]=text;setCodes(newCodes);if(text!==''&&index<count-1){var _current2;(_current2=refs[index+1].current)==null?void 0:_current2.focus();}var fullCode=newCodes==null?void 0:newCodes.join('');if((fullCode==null?void 0:fullCode.length)===((_String=String(count))==null?void 0:_String.length)){onFullCode==null?void 0:onFullCode(fullCode);}};return(0,_jsxRuntime.jsx)(_reactNative.View,{className:"flex flex-row justify-center gap-md",children:codes==null?void 0:codes.map(function(code,index){return(0,_jsxRuntime.jsx)(_reactNative.TextInput,{secureTextEntry:secureEntry,autoComplete:"one-time-code",enterKeyHint:"next",className:`text-lg-head h-[56px] w-[43px] px-md py-1 text-center rounded-md focus:bg-light-optiblueA3 ${isError?'text-light-type-error dark:text-dark-type-error bg-light-background-error-light dark:bg-dark-background-error-light':'text-light-type-gray dark:text-dark-type-gray bg-light-surface-gray dark:bg-dark-surface-gray'}`,inputMode:"numeric",onChangeText:function onChangeText(text){return onChangeCode(text,index);},value:code,maxLength:index===0?codes.length:1,ref:refs[index],onKeyPress:function onKeyPress(_ref2){var key=_ref2.nativeEvent.key;if(key==='Backspace'&&index>0){onChangeCode('',index-1);refs[index-1].current.focus();}}},index);})});};var _default=exports.default=CodeInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,