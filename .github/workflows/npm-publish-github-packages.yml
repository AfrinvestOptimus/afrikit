name: Publish npm Packages

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the main branch
      - name: Checkout main branch
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'yarn'

      # Step 3: Configure npm to use the authentication token
      - name: Configure npm to use the token
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      # Step 4: Install dependencies
      - name: Install dependencies
        run: yarn install
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # Step 5: Build the project
      - name: Build project
        run: yarn build

      # Step 6: Use Lerna to version and publish all updated packages to npm
      - name: Publish packages with Lerna
        run: |
          git config --global user.email "developers@afrinvest.com"
          git config --global user.name "Afrinvest"
          git checkout main
          npx lerna version --conventional-commits --yes --no-private
          npx lerna publish from-package --yes --no-private
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # Step 8: Push version changes and tags to GitHub only if there are changes
      - name: Check if there are changes
        id: changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes"
          else
            echo "no changes"
          fi

      - name: Commit and push version changes if there are any
        if: steps.changes.outputs.changes == 'changes'
        run: |
          git add .
          git commit -m "Bump versions [skip ci]"
          git push origin HEAD:main
          git push --tags
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # Step 9: Draft GitHub Release Notes
      - name: Draft GitHub Release Notes
        id: release_drafter
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # Step 10: Extract new version from package.json
      - name: Extract new version from package.json
        id: get_version
        run: |
          VERSION=$(node -p -e "require('./packages/mobile/package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 11: Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          body: ${{ steps.release_drafter.outputs.body }}
          draft: false
          prerelease: false

      # Step 12: Update CHANGELOG.md
      - name: Update CHANGELOG.md
        run: |
          echo -e "## v${{ env.VERSION }}\n\n${{ steps.release_drafter.outputs.body }}\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md for v${{ env.VERSION }}"
          git push origin main
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
