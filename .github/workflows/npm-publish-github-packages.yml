name: Publish npm Packages

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the main branch (avoiding detached HEAD state)
      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: main

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'
          cache: 'yarn'

      # Step 3: Configure npm to use the authentication token
      - name: Configure npm to use the token
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      # Step 4: Install dependencies (Lerna uses Yarn Workspaces)
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      # Step 5: Build the project
      - name: Build project
        run: yarn build

      # Step 6: Use Lerna to version and publish all updated packages to npm
      - name: Publish packages with Lerna
        run: |
          git config --global user.email "developers@afrinvest.com"
          git config --global user.name "Afrinvest"
          git checkout main # Ensure we are on the main branch
          npx lerna version --conventional-commits --yes --no-private --create-release=github
          npx lerna publish from-package --yes --no-private
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 7: Check if there are version changes
      - name: Check if there are changes
        id: changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes"
            echo "::set-output name=changes::changes"
          else
            echo "::set-output name=changes::no changes"
          fi

      # Step 8: Commit and push version changes if there are any
      - name: Commit and push version changes if there are any
        if: steps.changes.outputs.changes == 'changes'
        run: |
          git add .
          git commit -m "chore(release): bump version [skip ci]"
          git push origin HEAD:main
          git push --tags
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
